blueprint:
  name: HAMMER – Home Assistant Moonraker Messaging & Event Relay
  homeassistant:
    min_version: 2024.6.0
  description: "Sends notifications for 3D printer events via Discord, Alexa, mobile, and HA UI using Moonraker sensors.
    Features automatic base sensor extraction from main sensor, strict + fuzzy progress detection logic, layered notifications, and custom snapshot support. \n\n
    ⚠️ Please review all configuration sections carefully before skipping ahead. Some inputs rely on others. ⚠️\n\n v2025.8.4"
  domain: automation
  input:

    printer_config:
      name: Printer Setup
      icon: mdi:printer-3d
      collapsed: true
      input:
        friendly_name:
          name: Printer Friendly Name
          default: Neptune Max
          selector:
            text: {}
          description: "Name used in notifications."

        main_sensor:
          name: Main Printer Status Sensor
          default: sensor.neptune_max_current_print_state
          selector:
            entity:
              domain: sensor
          description: "Sensor for printer state (printing, paused, idle, etc). Base name auto-extracted for other sensors."

        progress_sensor:
          name: Progress Sensor
          default: sensor.neptune_max_progress
          selector:
            entity:
              domain: sensor
          description: "Moonraker's percentage progress sensor."
        filament_sensor:
          name: Filament Sensor
          default: binary_sensor.neptune_max_fila
          selector:
            entity:
              domain: binary_sensor
          description: "Binary sensor that goes OFF when filament runs out."


    camera_config:
      name: Camera Settings
      icon: mdi:camera
      collapsed: true
      input:
        camera_thumbnail:
          name: Thumbnail Camera
          default: camera.neptune_max_thumbnail
          selector:
            entity:
              domain: camera
          description: "G-code preview thumbnail camera."

        camera_webcam:
          name: Webcam Camera
          default: camera.neptune_max_webcam
          selector:
            entity:
              domain: camera
          description: "Optional real-time webcam view."

    progress_config:
      name: Progress Reporting
      icon: mdi:chart-line
      collapsed: true
      input:
        progress_update_percent:
          name: Progress Update Interval (%)
          default: "5"
          selector:
            select:
              options: ["1", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50"]
          description: Send updates at this interval. Short jobs may use fuzzy matching.

        disable_progress_non_critical:
          name: Disable Progress Alerts (Mobile/Persistent)
          default: false
          selector:
            boolean: {}
          description: Suppress mobile/persistent alerts for progress (still allows start/pause/finish).

        enable_bed_warming_notifications:
          name: Enable Bed Warming Notifications
          default: false
          selector:
            boolean: {}
          description: "Notify when bed reaches target temperature and stays stable."

        bed_warm_time_minutes:
          name: Bed Warm Time (Minutes)
          default: 5
          selector:
            number:
              min: 1
              max: 60
              step: 1
              unit_of_measurement: "minutes"
          description: "How long bed must stay at target temp before notification."

        bed_threshold_temp:
          name: Bed Minimum Temperature
          default: 59.0
          selector:
            number:
              min: 30.0
              max: 150.0
              step: 0.5
              unit_of_measurement: "°C"
          description: "Minimum bed temperature to maintain (target minus tolerance). Set to target-1°C."

        bed_temperature_sensor:
          name: Bed Temperature Sensor
          default: sensor.neptune_max_bed_temperature
          selector:
            entity:
              domain: sensor
          description: "Current bed temperature sensor."

        bed_target_sensor:
          name: Bed Target Sensor
          default: number.neptune_max_bed_target
          selector:
            entity:
              domain: number
          description: "Bed target temperature sensor."

    notification_config:
      name: Notifications
      icon: mdi:bell-ring
      collapsed: true
      input:
        enable_persistent_notification:
          name: Enable Persistent Notification
          default: true
          selector:
            boolean: {}
          description: Shows messages in HA UI notification tray.

        persistent_notification_title:
          name: Persistent Notification Title
          default: "3D Printer Alert"
          selector:
            text: {}
          description: Title for persistent notifications.

        enable_mobile_notifications:
          name: Enable Mobile Notifications
          default: false
          selector:
            boolean: {}
          description: Pushes alerts to mobile app.

        mobile_notification_entity:
          name: Mobile Notification Service
          default: notify.mobile_app_shawn_cell
          selector:
            text: {}
          description: "Notify service for mobile alerts."

        enable_discord_notifications:
          name: Enable Discord Notifications
          default: false
          selector:
            boolean: {}
          description: Sends messages to Discord (requires shell command setup).

        enable_discord_snapshot:
          name: Include Snapshot in Discord
          default: true
          selector:
            boolean: {}
          description: Attach snapshot to Discord messages.

        enable_alexa_notifications:
          name: Enable Alexa Notifications
          default: true
          selector:
            boolean: {}
          description: Speaks alerts via Alexa text-to-speech.

        alexa_notification_entity:
          name: Alexa Notification Service
          default: notify.alexa_media_3d_printer_notification_group
          selector:
            text: {}
          description: "Notification target for Alexa."

        time_after:
          name: Alexa Notifications Start Time
          default: "09:00:00"
          selector:
            time: {}
          description: Earliest time Alexa is allowed to speak.

        time_before:
          name: Alexa Notifications End Time
          default: "23:59:00"
          selector:
            time: {}
          description: Latest time Alexa will speak notifications.

    script_hooks:
      name: Script Hooks
      icon: mdi:code-braces
      collapsed: true
      input:
        on_print_start_script:
          name: On Print Start Script
          default: ""
          selector:
            entity:
              domain: script
          description: Optional script to run when a print job starts.
        on_print_finish_script:
          name: On Print Finish Script
          default: ""
          selector:
            entity:
              domain: script
          description: Optional script to run when a print job finishes.
        on_filament_out_script:
          name: On Filament Out Script
          default: ""
          selector:
            entity:
              domain: script
          description: Optional script to run when filament runs out.
        on_error_script:
          name: On Error Script
          default: ""
          selector:
            entity:
              domain: script
          description: Optional script to run when the printer enters an error state.

trigger_variables:
  main_sensor_entity: !input main_sensor
  sensor_base: "{{ main_sensor_entity.split('_current_print_state')[0].split('.')[1] if '_current_print_state' in main_sensor_entity else main_sensor_entity.split('.')[1].split('_')[0] + '_' + main_sensor_entity.split('.')[1].split('_')[1] }}"

trigger:
  - platform: state
    entity_id: !input main_sensor
    from: [idle, standby, completed, error]
    to: printing
    id: started

  - platform: state
    entity_id: !input main_sensor
    from: paused
    to: printing
    id: resumed

  - platform: state
    entity_id: !input main_sensor
    to: paused
    id: paused

  - platform: state
    entity_id: !input main_sensor
    from: printing
    to: [idle, standby, complete, error]
    id: finished

  - platform: state
    entity_id: !input main_sensor
    to: error
    id: error

  - platform: state
    entity_id: !input filament_sensor
    from: 'on'
    to: 'off'
    id: filament_out

  - platform: state
    entity_id: !input progress_sensor
    id: progress

  - platform: numeric_state
    entity_id: !input bed_temperature_sensor
    above: !input bed_threshold_temp
    for:
      minutes: !input bed_warm_time_minutes
    id: bed_ready

condition:
  - condition: or
    conditions:
      - condition: trigger
        id: started
      - condition: trigger
        id: resumed
      - condition: trigger
        id: finished
      - condition: trigger
        id: paused
      - condition: trigger
        id: error
      - condition: trigger
        id: filament_out
      - condition: trigger
        id: bed_ready
      - condition: template
        value_template: >
          {% set value = states(progress_sensor) | int(0) %}
          {% set interval = progress_update_percent | int(1) %}
          {% set remainder = value % interval %}
          {% set match = value > 0 and (remainder == 0 or remainder == (interval - 1)) %}
          {{ match }}

variables:
  printer_name: !input friendly_name
  printer_slug: "{{ printer_name | replace(' ', '_') }}"
  snapshot_filename: "{{ printer_slug }}_snapshot.jpg"
  main_sensor_entity: !input main_sensor
  sensor_base: "{{ main_sensor_entity.split('_current_print_state')[0].split('.')[1] if '_current_print_state' in main_sensor_entity else main_sensor_entity.split('.')[1].split('_')[0] + '_' + main_sensor_entity.split('.')[1].split('_')[1] }}"
  progress_sensor: !input progress_sensor
  current_layer_sensor: "sensor.{{ sensor_base }}_current_layer"
  total_layer_sensor: "sensor.{{ sensor_base }}_total_layer"
  enable_discord_notifications: !input enable_discord_notifications
  enable_discord_snapshot: !input enable_discord_snapshot
  enable_persistent_notification: !input enable_persistent_notification
  persistent_notification_title: !input persistent_notification_title
  enable_mobile_notifications: !input enable_mobile_notifications
  mobile_notification_entity: !input mobile_notification_entity
  disable_progress_non_critical: !input disable_progress_non_critical
  enable_alexa_notifications: !input enable_alexa_notifications
  alexa_notification_entity: !input alexa_notification_entity
  time_after: !input time_after
  time_before: !input time_before
  progress_update_percent: !input progress_update_percent
  enable_bed_warming_notifications: !input enable_bed_warming_notifications
  bed_warm_time_minutes: !input bed_warm_time_minutes
  bed_temperature_sensor: !input bed_temperature_sensor
  bed_target_sensor: !input bed_target_sensor
  on_print_start_script: !input on_print_start_script
  on_print_finish_script: !input on_print_finish_script
  on_filament_out_script: !input on_filament_out_script
  on_error_script: !input on_error_script
  discord_message: >-
    {% set time_left = states('sensor.' ~ sensor_base ~ '_print_time_left') | float(0) %}
    {% set is_short_job = time_left < 0.5 %}
    {% set pct = states(progress_sensor) | int(0) %}
    {% set total_minutes = (time_left * 60) | round %}
    {% set hours = total_minutes // 60 %}
    {% set minutes = total_minutes % 60 %}
    {% if trigger.id == 'paused' %}
      ⏸️ Print Job Paused on {{ printer_name }}!
    {% elif trigger.id == 'resumed' %}
      🔄 Print Job Resumed on {{ printer_name }}!
    {% elif trigger.id == 'started' %}
      🖨️ Print Job Started on {{ printer_name }}! 📄 File: {{ states('sensor.' ~ sensor_base ~ '_filename') }} 🕒 Started At: {{ now().strftime('%H:%M:%S') }}
    {% elif trigger.id == 'filament_out' %}
      🚫 Filament Runout Detected on {{ printer_name }}! Job Paused. Reload filament and resume the print.
    {% elif trigger.id == 'error' %}
      ⚠️ Print Error Detected on {{ printer_name }}! Check printer status immediately.
    {% elif trigger.id == 'progress' %}
      📢 {{ printer_name }} Progress: {{ pct }}% complete. 🧵 Filament Used: {{ states('sensor.' ~ sensor_base ~ '_filament_used') | float(0) }}m
    {% elif trigger.id == 'finished' %}
      🏁 Print Job Completed on {{ printer_name }}!  🎖 Lifetime Filament: {{ states('sensor.' ~ sensor_base ~ '_totals_filament_used') | float(0) }}m ({{ (states('sensor.' ~ sensor_base ~ '_totals_filament_used') | float(0) * 0.000621371) | round(2) }} mi)  Lifetime Print Time: {{ states('sensor.' ~ sensor_base ~ '_totals_print_time') }}
    {% elif trigger.id == 'bed_ready' %}
      🔥 Bed Ready on {{ printer_name }}! Temperature: {{ states(bed_temperature_sensor) | round(1) }}°C (Target: {{ states(bed_target_sensor) | round(1) }}°C) - Stable for {{ bed_warm_time_minutes }} minutes. Ready to print!
    {% endif %}

action:
  - delay: "00:00:01"
  - choose:
      - conditions:
          - condition: trigger
            id: started
        sequence:
          - service: camera.snapshot
            target:
              entity_id: !input camera_thumbnail
            data:
              filename: "/config/www/{{ snapshot_filename }}"
      - conditions:
          - condition: trigger
            id: resumed
        sequence:
          - service: camera.snapshot
            target:
              entity_id: !input camera_webcam
            data:
              filename: "/config/www/{{ snapshot_filename }}"
      - conditions:
          - condition: template
            value_template: "{{ enable_discord_snapshot }}"
        sequence:
          - service: camera.snapshot
            target:
              entity_id: !input camera_webcam
            data:
              filename: "/config/www/{{ snapshot_filename }}"
  - delay: "00:00:02"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_discord_notifications }}"
        sequence:
          - service: shell_command.printer_notify_webhook
            data:
              message: "{{ discord_message }}"
              snapshot_filename: "{{ snapshot_filename }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_persistent_notification and not (disable_progress_non_critical and trigger.id == 'progress') }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: "{{ persistent_notification_title }}"
              message: "{{ discord_message }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ enable_mobile_notifications and not (disable_progress_non_critical and trigger.id == 'progress') }}"
        sequence:
          - service: "{{ mobile_notification_entity }}"
            data:
              message: "{{ discord_message }}"
  - choose: # Separate choose block for Alexa notifications
      - conditions:
          - condition: template
            value_template: "{{ enable_alexa_notifications }}"
          - condition: time
            after: !input time_after
            before: !input time_before
        sequence:
            - service: "{{ alexa_notification_entity }}"
              data:
                message: >
                  {% if trigger.id == 'paused' %}Print job paused on {{ printer_name }}.{% elif trigger.id == 'resumed' %}Print job resumed on {{ printer_name }}.{% elif trigger.id == 'started' %}Print job started on {{ printer_name }}.{% elif trigger.id == 'filament_out' %}Filament runout detected on {{ printer_name }}.{% elif trigger.id == 'error' %}Print error detected on {{ printer_name }}.{% elif trigger.id == 'finished' %}Print job completed on {{ printer_name }}.{% elif trigger.id == 'bed_ready' %}Bed ready on {{ printer_name }}. Temperature stable at {{ states(bed_temperature_sensor) | round(1) }} degrees.{% endif %}
                data:
                  type: announce

  - choose: # Separate choose block for script calls
      - conditions:
          - condition: trigger
            id: started
          - condition: template
            value_template: "{{ on_print_start_script != '' and states(on_print_start_script) != 'unavailable' }}"
        sequence:
          - service: script.turn_on
            data:
              entity_id: "{{ on_print_start_script }}"
      - conditions:
          - condition: trigger
            id: finished
          - condition: template
            value_template: "{{ on_print_finish_script != '' and states(on_print_finish_script) != 'unavailable' }}"
        sequence:
          - service: script.turn_on
            data:
              entity_id: "{{ on_print_finish_script }}"
      - conditions:
          - condition: trigger
            id: filament_out
          - condition: template
            value_template: "{{ on_filament_out_script != '' and states(on_filament_out_script) != 'unavailable' }}"
        sequence:
          - service: script.turn_on
            data:
              entity_id: "{{ on_filament_out_script }}"
      - conditions:
          - condition: trigger
            id: error
          - condition: template
            value_template: "{{ on_error_script != '' and states(on_error_script) != 'unavailable' }}"
        sequence:
          - service: script.turn_on
            data:
              entity_id: "{{ on_error_script }}"
mode: queued
max: 10
